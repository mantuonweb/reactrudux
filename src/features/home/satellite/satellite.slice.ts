import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
// import { RootState } from '../../../App/store';
import { FilterSatelliteState, Satellite, SatelliteState } from '../../../models/models';
import { SateLiteApi } from '../../../api/satellite/satellite.api';



const initialState: SatelliteState = {
  satellites: [],
  loading: false,
  error: false,
};

export const fetchSatellites = createAsyncThunk('satellite/fetchList', async (filter: FilterSatelliteState) => {
  console.log(filter);
  const response = await SateLiteApi.getList(filter);
  return response.json();
});

export const satellitesSlice = createSlice({
  name: 'satellites',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchSatellites.pending, (state) => {
        state.loading = true;
      })
      .addCase(fetchSatellites.fulfilled, (state, action) => {
        state.loading = false;
        state.satellites = action.payload.map((item: Satellite) => {
          return mapToUIModel(item);
        });
      });
  },
});
function mapToUIModel(launch: Satellite, land = false) {
  return {
    missionId: launch.mission_id,
    missionName: launch.mission_name,
    isSuccess: launch.launch_success,
    launchYear: launch.launch_year,
    icon: launch.links.mission_patch_small,
    launchLanding: Boolean(land || launch.launch_landing)
  };
}
export default satellitesSlice.reducer;
